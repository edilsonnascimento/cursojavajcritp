06 - Validação de Formulários

01 - Validando os dados do formulário
Extraindo código de validação, dos campos do paciente.

02 - Exibindo mensagens de erro
Teste retornar uma mensagem de erro ou nada se tiver erro.

04 - Iterando com o forEach

Em um arquivo JavaScript, há um array de instrutores da Alura:
var nomes = ["Douglas", "Flávio", "Nico", "Rômulo", "Leonardo"];
Para percorrer o array e imprimir cada instrutor, deixando claro que eles são instrutores da Alura, podemos utilizar o loop for:
var nomes = ["Douglas", "Flávio", "Nico", "Rômulo", "Leonardo"];

for (var i = 0; i < nomes.length; i++) {
    console.log(nomes[i] + " é instrutor da Alura");
}
Mas vimos nesse capítulo uma outra forma de iterar sobre os elementos de um array, isto é, com o método forEach(). Como ficaria a implementação anterior, utilizando o forEach()?

Todo array possui a função forEach(), em JavaScript. Passamos para ela uma função por parâmetro, e nessa função fazemos o que quisermos para cada item do array. O item do array é recebido por parâmetro na função interna:
nomes.forEach(function(nome) {
    console.log(nome + " é instrutor da Alura");
})

05 - A propriedade innerHTML

Sobre a propriedade innerHTML, qual das afirmativas abaixo está incorreta?

Para editar o HTML interno de um elemento, basta passar o novo conteúdo por parâmetro para a propriedade.
Não, innerHTML é uma propriedade, não uma função, então ela recebe o novo conteúdo, ou seja, utilizamos um sinal de igual (=):
document.querySelector("#alura").innerHTML = "Novo texto"

Com a propriedade innerHTML, podemos editar obter o conteúdo HTML (HTML interno) de um elemento.
Para editar o HTML interno, como o innerHTML é uma propriedade, utilizamos um sinal de igual (=). Fazemos:
ObjetoDeUmElementoHTML.innerHTML = "Novo conteúdo"
E para obter o HTML interno, fazemos:
ObjetoDeUmElementoHTML.innerHTML
O seu retorno será todo o conteúdo HTML, tanto tags, atributos, classes, etc, no formato de uma String.

06 - Porque não consigo modificar o HTML interno de um elemento?

Rafael quer modificar o conteúdo do seguinte HTML, para utilizar o seu nome:
<p id="nome">Meu nome é Tadeu</p>
Ele conhece a propriedade innerHTML, e sabe que com ela pode modificar o HTML interno de um elemento, então ele fez o seguinte código:
var nome = document.querySelector("#nome").innerHTML;
nome = "Meu nome é Rafael";
Mas Rafael percebeu que o seu código não funciona, o que ele fez de errado? Pense no que Rafael fez de errado e em seguida veja a resposta do instrutor.

var nome = document.querySelector("#nome").innerHTML;
nome = "Meu nome é Rafael";
Na primeira linha, Rafael está obtendo o conteúdo do HTML interno do elemento <p>. Na segunda linha, ele apenas substitui o conteúdo dessa variável, ou seja, não define o innerHTML do elemento. Para modificar o HTML interno, Rafael deve alterar a propriedade innerHTML na segunda linha, e removê-la da primeira:
var nome = document.querySelector("#nome");
nome.innerHTML = "Meu nome é Rafael";


